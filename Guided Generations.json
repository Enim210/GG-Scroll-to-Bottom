{"version":2,"name":"Guided Generations","disableSend":false,"placeBeforeInput":false,"injectInput":false,"color":"rgba(0, 0, 0, 0)","onlyBorderColor":false,"qrList":[{"id":11,"showLabel":false,"label":"ü¶Æ","title":"Write in the inputfield a guide for the bots next Response and create a new Response with it.","message":"/setvar key=inp {{input}} |\n// Check for Autotrigger Clothes |\n/qr-get set=\"Guided Generations\" label=SysClothes | \n/let qrdetails {{pipe}} | \n/var index=executeOnUser qrdetails | \n/if left={{pipe}} {:\n/:\"Guided Generations.SysClothes\"|\n:}|\n// Check for AutoTrigger Thinking |\n/qr-get set=\"Guided Generations\" label=SysThinking | \n/let qrdetails2 {{pipe}} | \n/var index=executeOnUser qrdetails2 | \n/if left={{pipe}} {:\n/:\"Guided Generations.SysThinking\"|\n:}|\n\n\n/if left={{char}} right=\"\" rule=eq \n\telse={:\n\t/inject id=instruct position=chat depth=0 [{{getvar::inp}}]|\n\t/trigger await=true\n\t:} \n\t{:\n\t\t/split {{group}} |\n\t\t/setvar key=x {{pipe}} |\n\t\t/buttons labels=x Select members {{group}} |\n\t\t/setglobalvar key=selection {{pipe}} |\n\t\t/inject id=instruct position=chat depth=0 [{{getvar::inp}}] |\n\t\t/trigger await=true {{getglobalvar::selection}}\n\t:}|\n/setinput {{getvar::inp}}|\n/flushinjects instruct","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":17,"showLabel":false,"label":"‚û°Ô∏è","title":"Write in the inputfield a guide for the bots next Response and create a new Swipe with it. Works only when the last massage was written from the bot, not on user-messages or intros","message":"/setvar key=inp {{input}} |\n\n/inject id=instruct position=chat depth=0 [{{getvar::inp}}] |\n/swipes-swipe |\n\n/flushinjects instruct\n\n","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":9,"showLabel":false,"label":"‚úçÔ∏è","title":"Guided Impersonation. Write a rough outline what you want to do and let the LLM flesh it out.","message":"/ifempty value={{getglobalvar::old_input}} {{input}} |\n/setglobalvar key=old_input {{pipe}} |\n/ifempty value={{getglobalvar::new_input}} a |\n/setglobalvar key=new_input {{pipe}} |\n\n/if left={{input}} rule=eq right={{getglobalvar::new_input}} \nelse={:\n    /setglobalvar key=old_input {{input}} |\n    /impersonate await=true Write in first Person perspective from {{user}}. {{input}} |\n    /setglobalvar key=new_input {{input}} |\n:}\n{:\n    /setinput {{getglobalvar::old_input}} |\n:} |","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":34,"showLabel":false,"label":"‚ûï","title":"","message":"/send {{input}}|\n/setinput","contextList":[{"set":"Guided Generations","isChained":false}],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":36,"icon":"fa-caret-right","showLabel":true,"label":"üõüRecover input","title":"","message":"/setinput {{getglobalvar::old_input}} |\n","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":38,"icon":"fa-caret-right","showLabel":true,"label":"üôãEdit Intros","title":"","message":"// Editing Intro messages |\n/sys at=0 Editing Intro messages | \n/hide 0 |\n\n\n// Check if the input field is empty |\n/if left={{input}} rule=not else={:\n/setvar key=inp {{input}} |\n:}{:\n    // No input provided, present main menu of transformations |\n    /buttons labels=[\"Change Perspective\",\"Change Tense\",\"Change Style\",\"Change Gender\"] \"Select what you want to change in the intro:\" |\n    /let mainchoice {{pipe}} |\n\n    // --- PERSPECTIVE --- |\n    /if left={{var::mainchoice}} rule=eq right=\"Change Perspective\" {:\n        /buttons labels=[\"First Person\",\"Second Person\",\"Third Person\"] \"Select a perspective:\" |\n        /let perspectivechoice {{pipe}} |\n\n        /if left={{var::perspectivechoice}} rule=eq right=\"First Person\" {:\n            // First Person sub-options |\n            /buttons labels=[\"I/me (standard 1st person)\",\"{{user}} by name\",\"{{user}} as you\",\"{{user}} as he/him\",\"{{user}} as she/her\",\"{{user}} as they/them\"] \"How should {{user}} be referred to?\" |\n            /let fpchoice {{pipe}} |\n            /if left={{var::fpchoice}} rule=eq right=\"I/me (standard 1st person)\" {:\n                /setvar key=inp \"Rewrite the intro in first person, where {{user}} is the narrator using I/me. Keep {{char}}'s references consistent.\"\n            :}|\n            /if left={{var::fpchoice}} rule=eq right=\"{{user}} by name\" {:\n                /setvar key=inp \"Rewrite the intro in first person, but refer to {{user}} by their name instead of I/me, as if the narrator refers to themselves in the third person.\"\n            :}|\n            /if left={{var::fpchoice}} rule=eq right=\"{{user}} as you\" {:\n                /setvar key=inp \"Rewrite the intro in first person, but refer to {{user}} as 'you', creating a self-addressing perspective.\"\n            :}|\n            /if left={{var::fpchoice}} rule=eq right=\"{{user}} as he/him\" {:\n                /setvar key=inp \"Rewrite the intro in first person, but refer to {{user}} using he/him pronouns, as if the narrator speaks about themselves in the third person masculine.\"\n            :}|\n            /if left={{var::fpchoice}} rule=eq right=\"{{user}} as she/her\" {:\n                /setvar key=inp \"Rewrite the intro in first person, but refer to {{user}} using she/her pronouns, as if the narrator speaks about themselves in the third person feminine.\"\n            :}|\n            /if left={{var::fpchoice}} rule=eq right=\"{{user}} as they/them\" {:\n                /setvar key=inp \"Rewrite the intro in first person, but refer to {{user}} using they/them pronouns, as if the narrator speaks about themselves in the third person neutral.\"\n            :}|\n        :}|\n\n        /if left={{var::perspectivechoice}} rule=eq right=\"Second Person\" {:\n            // Second Person sub-option |\n            /buttons labels=[\"{{user}} as you\"] \"Second Person Options:\" |\n            /let spchoice {{pipe}} |\n            /if left={{var::spchoice}} rule=eq right=\"{{user}} as you\" {:\n                /setvar key=inp \"Rewrite the intro in second person, addressing {{user}} directly as 'you', and referring to {{char}} accordingly.\"\n            :}|\n        :}|\n\n        /if left={{var::perspectivechoice}} rule=eq right=\"Third Person\" {:\n            // Third Person sub-options |\n            /buttons labels=[\"{{user}} by name and pronouns\"] \"Third Person Options:\" |\n            /let tpchoice {{pipe}} |\n            /if left={{var::tpchoice}} rule=eq right=\"{{user}} by name and pronouns\" {:\n                /setvar key=inp \"Rewrite the intro in third person, referring to {{user}} by name and appropriate pronouns, and {{char}} by their pronouns, describing surroundings as if viewed from an outside observer.\"\n            :}|\n        :}|\n    :}|\n\n    // --- TENSE --- |\n    /if left={{var::mainchoice}} rule=eq right=\"Change Tense\" {:\n        /buttons labels=[\"Past Tense\",\"Present Tense\"] \"Select a tense:\" |\n        /let tensechoice {{pipe}} |\n        /if left={{var::tensechoice}} rule=eq right=\"Past Tense\" {:\n            /setvar key=inp \"Rewrite the intro entirely in the past tense, as if these events had already occurred.\"\n        :}|\n        /if left={{var::tensechoice}} rule=eq right=\"Present Tense\" {:\n            /setvar key=inp \"Rewrite the intro in present tense, making it feel immediate and ongoing.\"\n        :}|\n    :}|\n\n    // --- STYLE --- |\n    /if left={{var::mainchoice}} rule=eq right=\"Change Style\" {:\n        /buttons labels=[\"Novella Style\",\"Internet RP Style\",\"Literary Style\",\"Script Style\"] \"Select a style:\" |\n        /let stylechoice {{pipe}} |\n        /if left={{var::stylechoice}} rule=eq right=\"Novella Style\" {:\n            /setvar key=inp \"Change in a novella style format: use full paragraphs, literary descriptions, proper punctuation for dialogue, and a consistent narrative voice, as if taken from a published novel. Don't add anything other to the text.\"\n        :}|\n        /if left={{var::stylechoice}} rule=eq right=\"Internet RP Style\" {:\n            /setvar key=inp \"Change the intro in internet RP style: use asterisks for actions and narration like *She walks towards {{char}}*, keep all dialogue as is with quotes.\"\n        :}|\n        /if left={{var::stylechoice}} rule=eq right=\"Literary Style\" {:\n            /setvar key=inp \"Rewrite the intro in a literary style: employ rich metaphors, intricate descriptions, and a more poetic narrative flow, while maintaining proper punctuation and formatting.\"\n        :}|\n        /if left={{var::stylechoice}} rule=eq right=\"Script Style\" {:\n            /setvar key=inp \"Rewrite the intro in a script style: minimal narration, character names followed by dialogue lines, and brief scene directions in parentheses.\"\n        :}|\n    :}|\n\n    // --- GENDER --- |\n    /if left={{var::mainchoice}} rule=eq right=\"Change Gender\" {:\n        /buttons labels=[\"He/Him\",\"She/Her\",\"They/Them\"] \"Select pronouns for {{user}}:\" |\n        /let genderchoice {{pipe}} |\n        /if left={{var::genderchoice}} rule=eq right=\"He/Him\" {:\n            /setvar key=inp \"Rewrite the intro changing all references to {{user}} to use he/him pronouns.\"\n        :}|\n        /if left={{var::genderchoice}} rule=eq right=\"She/Her\" {:\n            /setvar key=inp \"Rewrite the intro changing all references to {{user}} to use she/her pronouns.\"\n        :}|\n        /if left={{var::genderchoice}} rule=eq right=\"They/Them\" {:\n            /setvar key=inp \"Rewrite the intro changing all references to {{user}} to use they/them pronouns.\"\n        :}|\n    :}|\n:}|\n\n// After all choices and conditions, if inp is set, rewrite the intro. |\n/breakpoint |\n/if left={{getvar::inp}} {:\n/inject id=msgtorework position=chat depth=0 role=assistant {{lastMessage}}|\n/inject id=instruct position=chat depth=0 [Write msgtorework again but correct it to reflect the following: {{getvar::inp}}. Don't cut the message or make changes besides that.] |\n\n/swipes-swipe |\n:}|\n\n/flushinjects instruct|\n/flushinjects msgtorework|\n\n/cut 0|\n\n","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":40,"icon":"fa-caret-right","showLabel":true,"label":"üìëCorrections","title":"Just type some information or Instructions to change the last message to reflect those.","message":"/ifempty value={{getglobalvar::old_input}} {{input}} |\n/setglobalvar key=old_input {{pipe}} |\n/setvar key=inp {{input}} |\n\n/inject id=msgtorework position=chat depth=0 role=assistant {{lastMessage}}|\n/inject id=instruct position=chat depth=0 [Write {{char}}'s last response again but correct it to reflect the following: {{getvar::inp}}. Don't make changes besides that.] |\n\n/swipes-swipe |\n\n/flushinjects instruct|\n/flushinjects msgtorework\n","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":42,"icon":"fa-caret-right","showLabel":true,"label":"ü§îPersistant Guides","title":"Persitant Guides","message":"/setvar key=inp {{input}} |\n/buttons labels=[\"Situational Guides (CoT Light)\",\"Thinking\",\"Clothes and State\",\"Rules\", \"Custom Guide\", \"Edit Guides\", \"Show Guides\", \"Flush Guides\"] \"Persitant Guides:\" |\n/setvar key=selection1 {{pipe}}|\n\n// Situational Guides |\n/if left={{getvar::selection1}} rule=eq right=\"Situational Guides (CoT Light)\" {:\n/flushvar focus | \n/if left={{getvar::inp}} {:\n/buttons labels=[\"Yes\",\"No\"] \"You have text in the Inputfield! Do you want to use it as a Focus for the Guide?:\"|\n/if left={{pipe}} right=Yes /setvar key=focus Focus on {{getvar::inp}}. |\n:}|\n\n/if left={{char}} right=\"\" rule=eq \n\telse={:\n\t\t/gen [OOC: Answer me out of Character! Considering the next response, write me a list entailing the relevant information of {{char}}'s description and chat history that would directly influence this response. {{getvar::focus}}]  |\n\t\t/inject id=situation position=chat depth=1 [Relevant Informations for portraying {{char}} {{pipe}}|\n\t:}\n\t{:\n\t\t/split {{group}} |\n/setvar key=x {{pipe}} |\n/buttons labels=x Select members {{group}} |\n\t\t/setglobalvar key=selection {{pipe}} |\n\t\t/gen [OOC: Answer me out of Character! Considering the next response, write me a list entailing the relevant information of {{getglobalvar::selection}}'s description and chat history that would directly influence this response. {{getvar::focus}}]  |\n\t\t/inject id={{getglobalvar::selection}} position=chat depth=1 [Relevant Informations for portraying {{getglobalvar::selection}} {{pipe}}\n\t:}|\n/listinjects | \n:}|\n\n// Thinking |\n/if left={{getvar::selection1}} rule=eq right=\"Thinking\" {:\n/:\"Guided Generations.SysThinking\"|\n/listinjects | \n:}|\n\n// Clothes and State |\n/if left={{getvar::selection1}} rule=eq right=\"Clothes and State\" {:\n/:\"Guided Generations.SysClothes\"|\n/listinjects | \n:}\t\n\n// Rule Guide Generation |\n// Check if a Rule Guide already exists |\n/if left={{getvar::selection1}} rule=eq right=\"Rules\" {:\n/listinjects return=object | \n/let x {{pipe}} | \n/var index=rule_guide x | \n/let y {{pipe}} | /var index=value y |\n/setvar key=existing_rule_guide {{pipe}} |\n\n// Generate or Update Rule Guide |\n/if left={{getvar::existing_rule_guide}} rule=eq right=\"\" \n else={: \n    // Existing rule guide found, instruct to update |\n    /gen [OOC: Answer me out of Character! Update the existing concise list of in-story rules and expectations that each recurring character must follow except {{user}}, considering new details from the recent chat history. These should be specific rules or expectations that the character has learned or been given during the story, including societal rules, rules given by other characters, or situational rules. Only add rules that the character as actually been given or has learned in the chat history. Only include Rules the Character is aware of. Create a separate list for each recurring character, and do not include their general behaviors, personality traits, or OOC instructions. Make sure there are no duplicates of rules. If there are multiple similar rules, merge them. Remove rules that have been counter-issued and change rules that have been modified in the story. Here is the existing list to reference: {{getvar::existing_rule_guide}}] |\n:} \n{:\n    // No existing rule guide found, generate a new one |\n    /gen [OOC: Answer me out of Character! Generate a concise list of in-story rules and expectations that each recurring character must follow except {{user}}. These should be specific rules or expectations that the character has learned or been given during the story, including societal rules, rules given by other characters, or situational rules. Only include Rules the Character is aware of. Create a separate list for each recurring character, and do not include general behavior of them, personality traits or OOC instructions.] |\n    /inject id=rule_guide position=chat depth=1 [Rules and Expectations for Characters: {{pipe}}] |\n:}|\n/listinjects | \n:}|\t\n// Custom Guide |\n/if left={{getvar::selection1}} rule=eq right=\"Custom Guide\" {:\n/listinjects return=object | \n/let x {{pipe}} | /var index=Custom x | \n/let y {{pipe}} | /var index=value y |\n/input large=off wide=on rows=20 default={{pipe}} Enter your custom Guide |\n/inject id=Custom position=chat depth=1 {{pipe}}\n\t\n:}|\n\n// Edit Guide |\n/if left={{getvar::selection1}} rule=eq right=\"Edit Guides\" {:\n/listinjects return=object | \n/let injections {{pipe}} | \n/keys {{var::injections}} | /let injection_names {{pipe}} | \n/buttons labels={{var::injection_names}} \"Select an Guide to edit:\" |\n/let selected_injection {{pipe}} |\n/let x {{var::injections}} | \n/var index={{var::selected_injection}} x | \n/let y {{pipe}} | \n/var index=value y |\n/input large=off wide=on rows=20 default={{pipe}} Edit  |\n/inject id={{var::selected_injection}} position=chat depth=1 {{pipe}}|\n:}|\n\n// Show Guides |\n/if left={{getvar::selection1}} rule=eq right=\"Show Guides\" {:\n/listinjects return=popup-html|\n:}|\n\n// Flush |\n/if left={{getvar::selection1}} rule=eq right=\"Flush Guides\" {:\n\n// Display initial Flush Options |\n/listinjects return=object | \n/let injections {{pipe}} | \n/keys {{var::injections}} | \n/setvar key=injection_names {{pipe}} | \n/addvar key=injection_names \"All\"|\n/buttons labels={{getvar::injection_names}} \"Select an Guide to flush:\" |\n/let selected_injection {{pipe}} |\n// Handle \"All\" selection |\n/if left={{var::selected_injection}} rule=eq right=\"All\" else={:\n/flushinjects  {{var::selected_injection}}|\n:}{:\n  /flushinjects |\n  /echo All Guides have been flushed. |\n:} |\n:} |\n/setinput {{getvar::inp}}|","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":44,"icon":"fa-caret-right","showLabel":true,"label":"üìãSpellchecker","title":"pell Checker corrects the grammar, and punctuation, and improves the paragraph's flow","message":"/ifempty value={{getglobalvar::old_input}} {{input}} |\n/setglobalvar key=old_input {{pipe}} |\n/genraw Without any intro or outro correct the grammar, and punctuation, and improves the paragraph's flow of: {{input}} |\n/setinput {{pipe}}|","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":46,"icon":"fa-caret-right","showLabel":true,"label":"üóëClear Input","title":"Clears the Inputfield","message":"/setinput |","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":48,"showLabel":false,"label":"SysClothes","title":"","message":"/flushinject clothes|\n/gen as=char [OOC: Answer me out of Character! Considering the last response, write me a list entailing the clothes and look, what they are currently wearing, and what state and position they are in of all participating characters, including {{user}}, that are present in the current scene.]  |\n\n/inject id=clothes position=chat depth=0 [Relevant Informations for portraying {{char}} {{pipe}}|\n","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""},{"id":50,"showLabel":false,"label":"SysThinking","title":"","message":"// Thinking |\n/if left={{char}} right=\"\" rule=eq \n\telse={:\n\t\t/gen name={{char}} [Write what {{char}} and other characters that are in the current scene are currently thinking; do not describe their actions or dialogue, only pure thought. Do not include the {{user}}'s thoughts in this.]  |\n\t\t/inject id=thinking position=chat depth=0 [{{char is currently thinking: {{pipe}}|\n\t:}\n\t{:\n\t\t/split {{group}} |\n/setvar key=x {{pipe}} |\n/buttons labels=x Select members {{group}} |\n\t\t/setglobalvar key=selection {{pipe}} |\n\t\t/gen [Write what {{getglobalvar::selection}} is currently thinking, do not describe their actions or dialogue, only pure thought and only {{getglobalvar::selection}}'s thoughts.]  |\n\t\t/inject id=thinking position=chat depth=0 [Relevant Informations for portraying {{getglobalvar::selection}} {{pipe}}\n\t:}|\n","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"executeOnNewChat":false,"automationId":""}],"idIndex":50}
